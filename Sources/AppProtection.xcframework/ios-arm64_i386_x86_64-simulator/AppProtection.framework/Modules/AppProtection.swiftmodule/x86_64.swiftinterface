// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AppProtection
@_exported import AppProtection
import CommonCrypto
import CoreData
import Foundation
import LocalAuthentication
import MachO
import Network
import Swift
import UIKit
import _Concurrency
public protocol AppProtectionRasp {
  func addDelegate(_ delegate: AppProtection.AppProtectionRaspDelegate)
  func removeDelegate(_ delegate: AppProtection.AppProtectionRaspDelegate)
  var isJailbroken: Swift.Bool { get }
  var isDebuggerConnected: Swift.Bool { get }
  var isRepackaged: Swift.Bool { get }
  var isSystemPasscodeEnabled: Swift.Bool { get }
  var isSystemBiometryEnabled: Swift.Bool { get }
  var isEmulator: Swift.Bool { get }
  var isReverseEngineeringToolsPresent: Swift.Bool { get }
  var isHttpProxyEnabled: Swift.Bool { get }
  @available(iOS 11.0, *)
  var isScreenCaptured: Swift.Bool { get }
}
public protocol AppProtectionRaspDelegate : AnyObject {
  func debuggerDetected()
  func jailbreakDetected()
  func repackageDetected()
  func httpProxyEnabled()
  func userScreenshotDetected()
  func screenCapturedChanged(isCaptured: Swift.Bool)
  func reverseEngineeringToolsDetected()
  func systemPasscodeConfigurationChanged(enabled: Swift.Bool)
  func systemBiometryConfigurationChanged(enabled: Swift.Bool)
  var triggerOnAdd: Swift.Bool { get }
}
extension AppProtection.AppProtectionRaspDelegate {
  public var triggerOnAdd: Swift.Bool {
    get
  }
}
@_hasMissingDesignatedInitializers public class AppProtectionService {
  public var clientAppUserId: Swift.String? {
    get
    set
  }
  public var rasp: AppProtection.AppProtectionRasp {
    get
  }
  public var events: AppProtection.AppProtectionEvents {
    get
  }
  convenience public init(config: AppProtection.AppProtectionConfig)
  @objc deinit
  public func resetInstanceId()
  public func release()
}
public struct AppProtectionConfig {
  public init(username: Swift.String, password: Swift.String, signaturePublicKey: Swift.String? = nil, clientAppUserId: Swift.String? = nil, raspConfig: AppProtection.AppProtectionRaspConfig = AppProtectionRaspConfig(), eventsConfig: AppProtection.AppProtectionEventConfig = AppProtectionEventConfig())
  public let username: Swift.String
  public let password: Swift.String
  public let signaturePublicKey: Swift.String?
  public let clientAppUserId: Swift.String?
  public let raspConfig: AppProtection.AppProtectionRaspConfig
  public let eventsConfig: AppProtection.AppProtectionEventConfig
}
public struct AppProtectionRaspConfig {
  public init(jailbreak: AppProtection.AppProtectionRaspConfig.DetectionConfig = .notify, debugger: AppProtection.AppProtectionRaspConfig.DebuggerDetectionConfig = .noAction, reverseEngineeringTools: AppProtection.AppProtectionRaspConfig.DetectionConfig = .notify, httpProxy: AppProtection.AppProtectionRaspConfig.DetectionConfig = .notify, repackage: AppProtection.AppProtectionRaspConfig.RepackageConfig = .noAction([]), screenCapture: AppProtection.AppProtectionRaspConfig.DetectionConfig = .notify)
  public let jailbreak: AppProtection.AppProtectionRaspConfig.DetectionConfig
  public let debugger: AppProtection.AppProtectionRaspConfig.DebuggerDetectionConfig
  public let reverseEngineeringTools: AppProtection.AppProtectionRaspConfig.DetectionConfig
  public let httpProxy: AppProtection.AppProtectionRaspConfig.DetectionConfig
  public let repackage: AppProtection.AppProtectionRaspConfig.RepackageConfig
  public let screenCapture: AppProtection.AppProtectionRaspConfig.DetectionConfig
  public enum DebuggerDetectionConfig {
    case noAction
    case notify
    case block
    case exit(_: Swift.String?)
  }
  public enum RepackageConfig {
    case noAction(_: [AppProtection.AppProtectionRaspConfig.RepackageConfig.TrustedCertificate])
    case notify(_: [AppProtection.AppProtectionRaspConfig.RepackageConfig.TrustedCertificate])
    case exit(_: [AppProtection.AppProtectionRaspConfig.RepackageConfig.TrustedCertificate], _: Swift.String?)
    public struct TrustedCertificate : Swift.Equatable {
      public init?(withBase64EncodedString string: Swift.String)
      public init(withData data: Foundation.Data)
      public init(withByteArray array: [Swift.UInt8])
      public static func == (lhs: AppProtection.AppProtectionRaspConfig.RepackageConfig.TrustedCertificate, rhs: AppProtection.AppProtectionRaspConfig.RepackageConfig.TrustedCertificate) -> Swift.Bool
    }
  }
  public enum DetectionConfig {
    case noAction
    case notify
    case exit(_: Swift.String?)
  }
}
public struct AppProtectionEventConfig {
  public init(enableEventCollection: Swift.Bool = true, enableScreenshotTakenCollection: Swift.Bool = true)
  public let enableEventCollection: Swift.Bool
  public let enableScreenshotTakenCollection: Swift.Bool
}
public typealias AppProtectionTrustedCert = AppProtection.AppProtectionRaspConfig.RepackageConfig.TrustedCertificate
public protocol AppProtectionEvents {
  func log(_ event: AppProtection.AppProtectionEvent)
  func log(_ events: [AppProtection.AppProtectionEvent])
}
public struct AppProtectionEvent : Swift.Equatable {
  public struct UserAction {
  }
  public struct Network {
    public static let sslInvalidCertificate: AppProtection.AppProtectionEvent
  }
  public struct Authentication {
    public static let deviceUnpaired: AppProtection.AppProtectionEvent
    public static let devicePaired: AppProtection.AppProtectionEvent
    public static let deviceBlocked: AppProtection.AppProtectionEvent
    public static let userIgnoredWeakPassphrase: AppProtection.AppProtectionEvent
    public static let passphraseChanged: AppProtection.AppProtectionEvent
    public static let biometryEnabled: AppProtection.AppProtectionEvent
    public static let biometryDisabled: AppProtection.AppProtectionEvent
    public static let authenticationFailed: AppProtection.AppProtectionEvent
    public static let authenticationSuccess: AppProtection.AppProtectionEvent
  }
  public static func == (a: AppProtection.AppProtectionEvent, b: AppProtection.AppProtectionEvent) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(EventData) public class EventData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension AppProtection.EventData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<AppProtection.EventData>
  @objc @NSManaged dynamic public var avuid: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var category: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var severity: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(FlagsData) public class FlagsData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension AppProtection.FlagsData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<AppProtection.FlagsData>
  @objc @NSManaged dynamic public var avUid: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var data: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
}
