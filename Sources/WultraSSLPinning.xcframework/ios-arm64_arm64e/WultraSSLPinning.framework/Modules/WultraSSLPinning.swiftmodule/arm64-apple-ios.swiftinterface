// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name WultraSSLPinning
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import PowerAuth2
import PowerAuthCore
import Swift
@_exported import WultraSSLPinning
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol SecureDataStore : AnyObject {
  @discardableResult
  func save(data: Foundation.Data, forKey key: Swift.String) -> Swift.Bool
  func loadData(forKey key: Swift.String) -> Foundation.Data?
  func removeData(forKey key: Swift.String)
}
extension WultraSSLPinning.CertStore {
  public func powerAuthSslValidationStrategy() -> any PowerAuth2.PowerAuthClientSslValidationStrategy
  public static func powerAuthCertStore(configuration: WultraSSLPinning.CertStoreConfiguration) -> WultraSSLPinning.CertStore
}
@objc public class PowerAuthSslPinningValidationStrategy : ObjectiveC.NSObject, PowerAuth2.PowerAuthClientSslValidationStrategy {
  final public let certStore: WultraSSLPinning.CertStore
  public init(certStore: WultraSSLPinning.CertStore)
  @objc public func validateSsl(for session: Foundation.URLSession, challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc deinit
}
public class PowerAuthSecureDataStore : WultraSSLPinning.SecureDataStore {
  public static let defaultKeychainIdentifier: Swift.String
  public init(keychainIdentifier: Swift.String = PowerAuthSecureDataStore.defaultKeychainIdentifier, accessGroup: Swift.String? = nil)
  public func save(data: Foundation.Data, forKey key: Swift.String) -> Swift.Bool
  public func loadData(forKey key: Swift.String) -> Foundation.Data?
  public func removeData(forKey key: Swift.String)
  @objc deinit
}
public struct CertStoreConfiguration {
  public let serviceUrl: Foundation.URL
  public let publicKey: Swift.String
  public let useChallenge: Swift.Bool
  public let expectedCommonNames: [Swift.String]?
  public let identifier: Swift.String?
  public let fallbackCertificatesData: Foundation.Data?
  public let periodicUpdateInterval: Foundation.TimeInterval
  public let expirationUpdateTreshold: Foundation.TimeInterval
  public let sslValidationStrategy: WultraSSLPinning.SSLValidationStrategy
  public init(serviceUrl: Foundation.URL, publicKey: Swift.String, useChallenge: Swift.Bool = false, expectedCommonNames: [Swift.String]? = nil, identifier: Swift.String? = nil, fallbackCertificatesData: Foundation.Data? = nil, periodicUpdateInterval: Foundation.TimeInterval = 7*24*60*60, expirationUpdateTreshold: Foundation.TimeInterval = 14*24*60*60, sslValidationStrategy: WultraSSLPinning.SSLValidationStrategy = .default)
}
public enum SSLValidationStrategy {
  case `default`
  case noValidation
  public static func == (a: WultraSSLPinning.SSLValidationStrategy, b: WultraSSLPinning.SSLValidationStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class CertStore {
  public init(configuration: WultraSSLPinning.CertStoreConfiguration, cryptoProvider: any WultraSSLPinning.CryptoProvider, secureDataStore: any WultraSSLPinning.SecureDataStore)
  public var instanceIdentifier: Swift.String {
    get
  }
  final public let configuration: WultraSSLPinning.CertStoreConfiguration
  public func reset()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WultraDebug {
  public enum VerboseLevel : Swift.Int {
    case off
    case errors
    case warnings
    case all
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static var verboseLevel: WultraSSLPinning.WultraDebug.VerboseLevel
  public static func print(_ message: @autoclosure () -> Swift.String)
  public static func warning(_ message: @autoclosure () -> Swift.String)
  public static func error(_ message: @autoclosure () -> Swift.String)
  public static func fatalError(_ message: @autoclosure () -> Swift.String) -> Swift.Never
  @objc deinit
}
extension WultraSSLPinning.CertStore {
  public enum ValidationResult {
    case trusted
    case untrusted
    case empty
    public static func == (a: WultraSSLPinning.CertStore.ValidationResult, b: WultraSSLPinning.CertStore.ValidationResult) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func validate(commonName: Swift.String, fingerprint: Foundation.Data) -> WultraSSLPinning.CertStore.ValidationResult
  public func validate(commonName: Swift.String, certificateData: Foundation.Data) -> WultraSSLPinning.CertStore.ValidationResult
  public func validate(challenge: Foundation.URLAuthenticationChallenge) -> WultraSSLPinning.CertStore.ValidationResult
}
extension WultraSSLPinning.CertStore {
  public enum UpdateMode {
    case `default`
    case forced
    public static func == (a: WultraSSLPinning.CertStore.UpdateMode, b: WultraSSLPinning.CertStore.UpdateMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum UpdateResult {
    case ok
    case storeIsEmpty
    case networkError
    case invalidData
    case invalidSignature
    public static func == (a: WultraSSLPinning.CertStore.UpdateResult, b: WultraSSLPinning.CertStore.UpdateResult) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func update(mode: WultraSSLPinning.CertStore.UpdateMode = .default, completionQueue: Dispatch.DispatchQueue = .main, completion: @escaping (_ result: WultraSSLPinning.CertStore.UpdateResult, _ error: (any Swift.Error)?) -> Swift.Void)
}
public protocol CryptoProvider : AnyObject {
  func ecdsaValidateSignatures(signedData: WultraSSLPinning.SignedData, publicKey: any WultraSSLPinning.ECPublicKey) -> Swift.Bool
  func importECPublicKey(publicKey: Foundation.Data) -> (any WultraSSLPinning.ECPublicKey)?
  func hashSha256(data: Foundation.Data) -> Foundation.Data
  func getRandomData(length: Swift.Int) -> Foundation.Data
}
public struct SignedData {
  public let data: Foundation.Data
  public let signature: Foundation.Data
}
public protocol ECPublicKey : AnyObject {
}
public class PowerAuthCryptoProvider : WultraSSLPinning.CryptoProvider {
  public init()
  public func ecdsaValidateSignatures(signedData: WultraSSLPinning.SignedData, publicKey: any WultraSSLPinning.ECPublicKey) -> Swift.Bool
  public func importECPublicKey(publicKey: Foundation.Data) -> (any WultraSSLPinning.ECPublicKey)?
  public func hashSha256(data: Foundation.Data) -> Foundation.Data
  public func getRandomData(length: Swift.Int) -> Foundation.Data
  @objc deinit
}
extension PowerAuthCore.PowerAuthCoreECPublicKey : WultraSSLPinning.ECPublicKey {
}
extension WultraSSLPinning.SSLValidationStrategy : Swift.Equatable {}
extension WultraSSLPinning.SSLValidationStrategy : Swift.Hashable {}
extension WultraSSLPinning.WultraDebug.VerboseLevel : Swift.Equatable {}
extension WultraSSLPinning.WultraDebug.VerboseLevel : Swift.Hashable {}
extension WultraSSLPinning.WultraDebug.VerboseLevel : Swift.RawRepresentable {}
extension WultraSSLPinning.CertStore.ValidationResult : Swift.Equatable {}
extension WultraSSLPinning.CertStore.ValidationResult : Swift.Hashable {}
extension WultraSSLPinning.CertStore.UpdateMode : Swift.Equatable {}
extension WultraSSLPinning.CertStore.UpdateMode : Swift.Hashable {}
extension WultraSSLPinning.CertStore.UpdateResult : Swift.Equatable {}
extension WultraSSLPinning.CertStore.UpdateResult : Swift.Hashable {}
